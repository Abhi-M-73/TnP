Here are 100 new JavaScript questions, slightly harder than the previous ones, focusing on problem-solving, intermediate concepts, and advanced use of JavaScript features.

1. Intermediate Console and Variables (10 Questions)
	1.	Create a program that calculates and logs the result of (5 + 3) * 2 - 8 / 4.
	answer =>
	console.log((5 + 3) * 2 - 8 / 4);     //  14

	2.	Log the value of a variable before and after incrementing it using ++.
	answer =>
	let a = 1;
	console.log(a);   // 1
	a++;
	console.log(a);    // 2

	3.	Write a program that swaps the values of two variables without using a third variable.
	answer =>
	let name = 'abhi';
	let age = 22;
	console.log(`Name : ${name} & Age : ${age}`);

	4.	Create a variable with a template literal that includes your name and age.
	answer =>
	let name = 'abhi';
	let age = 22;
	console.log(`Name : ${name} & Age : ${age}`);

	5.	Use console.table() to display the following object: { name: "John", age: 30, city: "New York" }.
	answer =>
	let obj = { name: "John", age: 30, city: "New York" };
	console.table(obj);

	6.	Create a program that uses console.group() to group related logs.
	answer =>
	console.log("Hello world!");
	console.group();
	console.log("Hello again, this time inside a group!");
	console.log('Hm..')
	console.groupEnd();
	console.log("and we are back.");

	7.	Use console.time() and console.timeEnd() to measure the execution time of a simple loop.
	answer =>
	console.log("Hello world!");
	console.time()
	console.log("Hello again, this time inside a group!");
	console.log('hhhhhhhhhhhhhhhh')
	console.timeEnd()     //  default: 0.558ms
	console.log("and we are back.");

	8.	Log a variable’s value dynamically by including it in a string: "The value is: <value>".
	answer =>
	let str = "Hello World!"
	console.log(`The value is: ${str}`);

	9.	Use console.trace() to debug a function call stack.
	answer =>
	function myFunction() {
		myOtherFunction();
	}
	function myOtherFunction() {
		console.trace();
	}
	myFunction();

	10.	Create and log an object dynamically using computed property names.
	answer =>
	let cityProperty = "city";
	let obj = {
		name: "John",
		age: 30,
		[cityProperty]: "New York"
	};
	console.log(obj);    // { name: 'John', age: 30, city: 'New York' }


2. Advanced Loops (10 Questions)
	11.	Write a nested loop to generate a multiplication table (1 to 10).
	answer =>
	for (let i = 1; i < 11; i++) {
		console.log(`--- Table of ${i} ---`)
		for (let j = 1; j < 11; j++) {
			console.log(`${i} * ${j} = ${i * j}`);
		}
	}

	12.	Use a for...in loop to iterate through the properties of an object.
	answer =>
	let obj = { name: "John", age: 30, city: "New York" };
	for (const property in obj) {
	console.log(property);
	}

	13.	Write a program to calculate the sum of all even numbers between 1 and 100 using a for loop.
	answer =>
	let sum = 0;
	for (let i = 1; i < 5; i++) {
		if (i % 2 === 0) {
			sum += i;
		}
	}
	console.log(sum);

	14.	Use a for...of loop to iterate over a string and count the vowels.
	answer =>
	let str = "helloei";
	let vowel = "aeiouAEIOU";
	let vowelCount = 0;
	for (const element of str) {
		if(vowel.includes(element)){
			vowelCount++;
		}
	}
	console.log(vowelCount)    // 4

	15.	Create a loop that breaks out when a specific condition is met (e.g., number divisible by 7).
	answer =>
	for(i = 1; i < 51; i++){
		if(i % 7 === 0){
			console.log(i);
			break;
		}
	}

	16.	Write a loop that skips numbers divisible by 3 but logs all others up to 20.
	answer =>
	for (let i = 1; i < 30; i++) {
		if (i % 3 === 0) continue;
		if (i > 20) console.log(i);
	}

	17.	Use a do...while loop to prompt the user until they enter a positive number.
	answer =>
	let inp;
	do {
		inp = +prompt("Enter a number");
		if (inp >= 0) break;
	} while (true);

	18.	Write a nested loop to generate a pyramid pattern:
   		*
  	   ***
 	  *****
	 *******

	answer =>
	let rows = 4; // Number of rows
	for (let i = 1; i <= rows; i++) {
		let star = "";
		// Add spaces before stars
		for (let j = rows; j > i; j--) {
			star += " ";
		}
		// Add stars
		for (let k = 1; k <= 2 * i - 1; k++) {
			star += "*";
		}
		console.log(star);
	}


	19.	Use a loop to reverse a string "JavaScript".
	answer =>
	let str = "JavaScript";
	let revStr = '';
	for(i = str.length-1; i >= 0; i-- ){
		revStr += str[i];
	}
	console.log(revStr);      //  tpircSavaJ

	20.	Write a program to calculate the product of all numbers in an array using a loop.
	answer =>
	let arr = [2, 5, 5];
	let productOfAllNumber = 1;
	for (let i = 0; i < arr.length; i++) {
		productOfAllNumber *= arr[i];
	}
	console.log(productOfAllNumber);   //  50


3. Arrays and Objects (10 Questions)
	21.	Write a program to merge two arrays and remove duplicate values.
	answer =>
	let arr1 = [1, 2, 3];
	let arr2 = [1, 4, 5];
	let arr = [...arr1, ...arr2];
	let res = [...new Set(arr)]
	console.log(res);

	22.	Create a program to find the second largest number in an array.
	answer =>
	let arr = [1, 2, 9, 3, 6, 5];
	arr.sort((a, b) => b - a);
	for (let i = 1; i < arr.length; i++) {
		if (arr[i] < arr[0]) {
			console.log(arr[i]); 
			break;
		}
	}

	23.	Write a function that removes all falsy values from an array.
	answer =>
	function removeFalsyVal(arr) {
		let falsyVal = [false, undefined, 0, -0, "", null, NaN];
		let res = []
		for (let i = 0; i < arr.length; i++) {
			if (!falsyVal.includes(arr[i])) {
				res.push(arr[i]);
			} 
		}
		return res;
	}
	let mixVal = [false, 0, -0, "", null, undefined, NaN, "hello", 1, [], {}, true];
	console.log(removeFalsyVal(mixVal));         //  [ 'hello', 1, [], {}, true ]

	24.	Use .reduce() to find the total sum of numbers in an array.
	answer =>
	let arr = [1, 2, 3, 4, 5];
	let res = arr.reduce((acc, cur) => acc = acc + cur , 0);
	console.log(res);

	25.	Write a program that rotates an array to the left by n positions.
	answer =>
	function leftRotate(arr, n){
		let res = arr.splice(0, n);
		arr.push(...res)
		return arr;
	}
	let arr = [1, 2, 3, 4, 5, 8, 9, 10];
	let n = 4
	console.log(leftRotate(arr, n));

	26.	Use .find() to locate the first even number in an array.
	answer =>
	let arr = [1, 9, 3, 4, 5];
	let res = arr.find((elem) => elem % 2 === 0);
	console.log(res);    // 4
	

	27.	Create a function that flattens a nested array (e.g., [1, [2, [3]]] → [1, 2, 3]).
	answer =>
	

	28.	Write a program that counts how many times each element appears in an array.
	answer =>
	let arr = [1, 3, 3, 4, 5, 5];
	let CountDetails = {};
	for (let i = 0; i < arr.length; i++) {
		CountDetails[arr[i]] = (CountDetails[arr[i]] || 0) + 1; 
	}
	console.log(CountDetails);

	29.	Use .some() and .every() to check conditions on an array.
	answer =>
	const ages = [32, 33, 16, 40];
	// every() = It returns true if all elements meet the condition, and false if any one element does not meet the condition.
	let resOfEvery = ages.every((age) => age > 18);
	console.log(resOfEvery);      //  false

	// some() = It returns true if any one element meets the condition, and false if none of the elements meet the condition.
	let resOfSome = ages.some((age) => age > 18);
	console.log(resOfSome);      //   true

	30.	Sort an array of objects by a specific property.
	answer =>


4. Functions and Closures (10 Questions)
	31.	Write a function that returns another function to calculate the power of a number.
	32.	Create a recursive function to calculate the Fibonacci sequence up to n terms.
	33.	Write a function that uses closures to create a counter.
	34.	Create a function that memoizes the result of a computation.
	35.	Write a function to debounce a button click event.
	36.	Implement a function that throttles an API call.
	37.	Create a higher-order function that applies a callback to each element of an array.
	38.	Write a function that calculates the GCD (Greatest Common Divisor) of two numbers.
	39.	Create a function that accepts an array of functions and executes them sequentially.
	40.	Write a function to curry a simple mathematical operation.

5. Strings and Regular Expressions (10 Questions)
	41.	Write a program to reverse the words in a sentence but not the sentence itself.
	42.	Use a regex to validate if a string is a valid email address.
	43.	Create a function to check if a string contains only digits.
	44.	Write a function to extract all numbers from a string and return them as an array.
	45.	Use .match() to find all occurrences of a word in a string.
	46.	Create a program to capitalize the first letter of each word in a string.
	47.	Write a function that removes duplicate characters from a string.
	48.	Use a regex to replace multiple spaces with a single space.
	49.	Write a function to check if a string is an anagram of another string.
	50.	Create a function to count the frequency of each word in a string.

6. Intermediate DOM Manipulation (10 Questions)
	51.	Write a script to dynamically create 10 buttons on a webpage.
	52.	Add an event listener to a button that logs its id when clicked.
	53.	Write a program to change the background color of a <div> on hover.
	54.	Dynamically add a CSS class to an element when a button is clicked.
	55.	Create a function to toggle the visibility of an element.
	56.	Write a program to count the number of <p> tags on a page.
	57.	Implement a function to disable all input fields on a form.
	58.	Write a program to clone an element and append it to the DOM.
	59.	Add a click event to a list of items and display the clicked item’s text.
	60.	Create a program to validate a form using JavaScript.

7. Intermediate Algorithms (10 Questions)
	61.	Write a function to merge two sorted arrays into one sorted array.
	62.	Implement a binary search algorithm.
	63.	Write a function to check if two strings are one edit away.
	64.	Create a function that finds the longest common prefix in an array of strings.
	65.	Write a program to check if a string can be rearranged into a palindrome.
	66.	Create a function to find the intersection of two arrays.
	67.	Implement the Sieve of Eratosthenes to find prime numbers up to n.
	68.	Write a program to generate all subsets of a given array.
	69.	Create a function to calculate the power of a number iteratively.
	70.	Implement a function to sort an array using the quicksort algorithm.

8. Advanced Error Handling (10 Questions)
	71.	Write a program to handle a division by zero error.
	72.	Use try...catch to log an error message for invalid JSON parsing.
	73.	Write a function to validate user input and throw a custom error if invalid.
	74.	Create a program to handle a failed promise using .catch().
	75.	Use finally to log a cleanup message after a promise resolves or rejects.
	76.	Implement a function to retry a failed API call up to 3 times.
	77.	Write a function that uses try...catch inside an async function.
	78.	Create a program to handle and log syntax errors dynamically.
	79.	Write a function to ensure a variable is defined before using it.
	80.	Use error handling to check if a file exists before reading it.

9. Advanced Array and Object Manipulation (10 Questions)
	81.	Write a function that groups an array of objects by a specific property.
	82.	Use .map() to transform an array of objects into a new format.
	83.	Write a program to deep clone an object without using external libraries.
	84.	Create a function that merges multiple arrays into a single unique array.
	85.	Write a function to count the occurrences of properties in an array of objects.
	86.	Implement a function to sort an array of objects by multiple properties.
	87.	Write a function to create a nested object from a flat array of key-value pairs.
	88.	Use .reduce() to transform an array into an object with grouped values.
	89.	Create a function to find the difference between two arrays of objects.
	90.	Write a function to filter and transform an array of objects in a single step.

10. Real-World Use Cases (10 Questions)
	91.	Create a simple program that fetches and displays user data from a mock API.
	92.	Write a program to simulate a shopping cart with add, remove, and total cost features.
	93.	Implement a simple pagination system for an array of data.
	94.	Write a program to dynamically update a chart using JavaScript.
	95.	Create a program to search for and highlight specific text on a webpage.
	96.	Write a program to simulate a basic stopwatch with start, stop, and reset functionality.
	97.	Implement a function to validate password strength based on rules.
	98.	Create a simple image slider with next/previous buttons.
	99.	Write a program to sort and display data fetched from an API.
	100.Create a program that automatically saves form data to localStorage.

Let me know if you’d like to explore solutions or get hints for any of these!